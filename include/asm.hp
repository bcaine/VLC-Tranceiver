#ifndef _PRAMTEST_HP_
#define _PRAMTEST_HP_


// ***************************************
// *     Ryan's Macro Definitions        *
// ***************************************

// Testing
#define PACKETS_2_RCV 100
#define GPIO_DEBUG    1

// Implementation Constants:
#define PACK_LEN 83
#define PIN_OFFSET_BIT 15

// Timing:
#define RX_PRU1_TIMEOUT 1328000
#define SYNC_TIMEOUT         40

// Preamble:
#define PREAMBLE1 0//b00111100
#define REQ_BITS1 7 // out of 8
#define INIT_PRE1 0x0000

#define PREAMBLE2 0b0011110000111
#define REQ_BITS2 12 // out of 13
#define INIT_PRE2 0x00000000
#define PRE_BITMASK 0b0000111111111111

// Memory Access:
#define DDR_ADDRESS 0x90000000
#define READY_CODE 0xaa
#define DONE_CODE 0xff
#define ERROR_CODES 0x00
#define OFFSET_LIM 16777130 // maximum byte offset
#define INIT_OFFSET 8

// Macros:
.macro GET_BIT
.mparam reg, pin, dst
    LSR dst, reg, pin // sample GPI reg, shift sample value to 0th index
    AND dst, dst, 1 // and to zero out all other bits
.endm

.macro SET_BIT
.mparam dst
    SET dst
#ifdef GPIO_DEBUG
    SET r30.t15
    MOV r0, r0
#endif
.endm

.macro CLR_BIT
.mparam dst
    CLR dst
#ifdef GPIO_DEBUG
    CLR r30.t15
    MOV r0, r0
#endif
.endm

.macro GET_DIFF_8
.mparam rcvd, preamble, dst, hold1, hold2
    XOR hold1, rcvd, preamble // get bitwise differences b/w preamble and current
    NOT hold1, hold1 // NOT - get bitwise similarities

    LSR hold2, hold1, 0 // shift to bit of interest
    AND hold2, hold2, 1 // isolate that bit
    ADD dst, dst, hold2 // add it to the counter

    LSR hold2, hold1, 1 // repeat for each bit
    AND hold2, hold2, 1 
    ADD dst, dst, hold2

    LSR hold2, hold1, 2
    AND hold2, hold2, 1 
    ADD dst, dst, hold2

    LSR hold2, hold1, 3
    AND hold2, hold2, 1 
    ADD dst, dst, hold2
    
    LSR hold2, hold1, 4
    AND hold2, hold2, 1 
    ADD dst, dst, hold2

    LSR hold2, hold1, 5
    AND hold2, hold2, 1 
    ADD dst, dst, hold2

    LSR hold2, hold1, 6
    AND hold2, hold2, 1 
    ADD dst, dst, hold2

    LSR hold2, hold1, 7
    AND hold2, hold2, 1 
    ADD dst, dst, hold2

.endm

.macro GET_DIFF_13
.mparam rcvd, preamble, dst, hold1, hold2, bitmask
    AND hold1, rcvd, bitmask
    XOR hold1, hold1, preamble // get bitwise differences b/w preamble and current
    NOT hold1, hold1 // NOT - get bitwise similarities

    LSR hold2, hold1, 0 // shift to bit of interest
    AND hold2, hold2, 1 // isolate that bit
    ADD dst, dst, hold2 // add it to the counter

    LSR hold2, hold1, 1 // repeat for each bit
    AND hold2, hold2, 1 
    ADD dst, dst, hold2

    LSR hold2, hold1, 2
    AND hold2, hold2, 1 
    ADD dst, dst, hold2

    LSR hold2, hold1, 3
    AND hold2, hold2, 1 
    ADD dst, dst, hold2
    
    LSR hold2, hold1, 4
    AND hold2, hold2, 1 
    ADD dst, dst, hold2

    LSR hold2, hold1, 5
    AND hold2, hold2, 1 
    ADD dst, dst, hold2

    LSR hold2, hold1, 6
    AND hold2, hold2, 1 
    ADD dst, dst, hold2

    LSR hold2, hold1, 7
    AND hold2, hold2, 1 
    ADD dst, dst, hold2

    LSR hold2, hold1, 8
    AND hold2, hold2, 1 
    ADD dst, dst, hold2

    LSR hold2, hold1, 9
    AND hold2, hold2, 1 
    ADD dst, dst, hold2

    LSR hold2, hold1, 10
    AND hold2, hold2, 1 
    ADD dst, dst, hold2

    LSR hold2, hold1, 11
    AND hold2, hold2, 1 
    ADD dst, dst, hold2

    LSR hold2, hold1, 12
    AND hold2, hold2, 1 
    ADD dst, dst, hold2

.endm

// ***************************************
// *      Global Macro definitions       *
// ***************************************
#define AM33XX

#ifdef AM33XX

// Refer to this mapping in the file - \prussdrv\include\pruss_intc_mapping.h
#define PRU0_PRU1_INTERRUPT     17
#define PRU1_PRU0_INTERRUPT     18
#define PRU0_ARM_INTERRUPT      19
#define PRU1_ARM_INTERRUPT      20
#define ARM_PRU0_INTERRUPT      21
#define ARM_PRU1_INTERRUPT      22

#define CONST_PRUCFG       C4
#define CONST_PRUDRAM      C24
#define CONST_PRUSHAREDRAM C28
#define CONST_DDR          C31

// Address for the Constant table Block Index Register (CTBIR)
#define PRU0CTBIR_0         0x22020
// Address for the Constant table Programmable Pointer Register 0(CTPPR_0)
#define PRU0CTPPR_0         0x22028
// Address for the Constant table Programmable Pointer Register 1(CTPPR_1)
#define PRU0CTPPR_1         0x2202C

#define PRU1CTBIR_0	    0x24020
#define PRU1CTPPR_0	    0x24028
#define PRU1CTPPR_1         0x2402C

#endif

.macro  LD32
.mparam dst,src
    LBBO    dst,src,#0x00,4
.endm

.macro  LD16
.mparam dst,src
    LBBO    dst,src,#0x00,2
.endm

.macro  LD8
.mparam dst,src
    LBBO    dst,src,#0x00,1
.endm

.macro ST32
.mparam src,dst
    SBBO    src,dst,#0x00,4
.endm

.macro ST16
.mparam src,dst
    SBBO    src,dst,#0x00,2
.endm

.macro ST8
.mparam src,dst
    SBBO    src,dst,#0x00,1
.endm


// ***************************************
// *    Global Structure Definitions     *
// ***************************************


// ***************************************
// *     Global Register Assignments     *
// ***************************************


#endif //_PRU_memAccessPRUDataRAM_HP_

